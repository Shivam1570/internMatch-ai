// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Recommends relevant internships based on an applicant's skills, preferences, and qualifications.
 *
 * - recommendRelevantInternships - A function that recommends internships.
 * - RecommendRelevantInternshipsInput - The input type for the recommendRelevantInternships function.
 * - RecommendRelevantInternshipsOutput - The return type for the recommendRelevantInternships function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const RecommendRelevantInternshipsInputSchema = z.object({
  applicantSkills: z
    .array(z.string())
    .describe('The skills of the applicant.'),
  applicantLocationPreference: z
    .string()
    .describe('The preferred location of the applicant.'),
  applicantSectorInterests: z
    .array(z.string())
    .describe('The sectors of interest to the applicant.'),
  internshipListings: z.array(z.object({
    title: z.string(),
    description: z.string(),
    location: z.string(),
    sector: z.string(),
    skills: z.array(z.string()),
  })).describe('A list of available internship opportunities.'),
  locationWeight: z.number().min(0).max(1).default(0.5).describe('Weight of the applicant location preference vs sector interests, from 0 to 1.'),
});
export type RecommendRelevantInternshipsInput = z.infer<
  typeof RecommendRelevantInternshipsInputSchema
>;

const RecommendRelevantInternshipsOutputSchema = z.array(z.object({
  title: z.string(),
  description: z.string(),
  location: z.string(),
  sector: z.string(),
  matchScore: z.number().describe('A score indicating how well the internship matches the applicant.'),
}));
export type RecommendRelevantInternshipsOutput = z.infer<
  typeof RecommendRelevantInternshipsOutputSchema
>;

const compareInternships = (a: any, b: any) => b.matchScore - a.matchScore;

export async function recommendRelevantInternships(
  input: RecommendRelevantInternshipsInput
): Promise<RecommendRelevantInternshipsOutput> {
  return recommendRelevantInternshipsFlow(input);
}

const recommendInternshipsPrompt = ai.definePrompt({
  name: 'recommendInternshipsPrompt',
  input: {schema: RecommendRelevantInternshipsInputSchema},
  output: {schema: RecommendRelevantInternshipsOutputSchema},
  prompt: `You are an AI-powered internship recommendation engine. Given the
   following applicant information and a list of internship listings, you will
    recommend the most relevant internships to the applicant.

Applicant Skills: {{applicantSkills}}
Applicant Location Preference: {{applicantLocationPreference}}
Applicant Sector Interests: {{applicantSectorInterests}}
Location Weight: {{locationWeight}}

Internship Listings:
{{#each internshipListings}}
  Title: {{this.title}}
  Description: {{this.description}}
  Location: {{this.location}}
  Sector: {{this.sector}}
  Skills: {{this.skills}}
{{/each}}

For each internship listing, compute a match score between 0 and 1 based on
 the applicant's skills, location preference, and sector interests. Take into
  account the locationWeight, which determines how much the location is
   prioritized. Return a sorted list of internship listings by relevance.
   Location match should be a binary match, with 1 if location matches and 0 otherwise. The matchScore
   should be a weighted average of location match and skills/sector match.
`,
});

const recommendRelevantInternshipsFlow = ai.defineFlow(
  {
    name: 'recommendRelevantInternshipsFlow',
    inputSchema: RecommendRelevantInternshipsInputSchema,
    outputSchema: RecommendRelevantInternshipsOutputSchema,
  },
  async input => {
    const {output} = await recommendInternshipsPrompt(input);
    if (output == null) {
      console.warn('No output from recommendInternshipsPrompt, returning empty array.');
      return [];
    }
    output.sort(compareInternships);
    return output!;
  }
);
